{"version":3,"file":"index.js","mappings":"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","sources":["webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/classes/cart-fragments/class.cart-fragments-handler.ts","webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/index.ts","webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/classes/widgets/base/class.widget.ts","webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/classes/widgets/base/class.advanced-dropdown-widget.ts","webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/classes/widgets/class.dropdown-currency-selector-widget.ts","webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/classes/widgets/class.dropdown-country-selector-widget.ts","webpack://aelia_currency_switcher_frontend_scripts_bundle/./src/classes/scripts-manager/class.frontend-scripts-manager.ts"],"sourcesContent":["import { ICart_Fragments_Handler_Settings } from './interface.cart-fragments-handler-settings';\n\n/**\n * Implements the scripts to handle WooCommerce's cart fragments.\n *\n * @since 4.12.1.210629\n */\nexport class Cart_Fragments_Handler { // NOSONAR\n\t/**\n\t * The argument that can be used to set a currency via the URL.\n\t *\n\t * @var string\n\t */\n\tprotected static ARG_CURRENCY: string = 'aelia_cs_currency';\n\n\t/**\n\t * The singleton instance of this class.\n\t *\n\t * @var Cart_Fragments_Handler\n\t */\n\tprotected static _instance: Cart_Fragments_Handler;\n\n\t /**\n\t\t* The settings passed to the class.\n\t\t*\n\t\t* @var ICart_Fragments_Handler_Settings\n\t\t*/\n\tprotected settings: ICart_Fragments_Handler_Settings;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param settings ICart_Fragments_Handler_Settings\n\t */\n\tpublic constructor(settings: ICart_Fragments_Handler_Settings) {\n\t\tthis.settings = settings;\n\t\tCart_Fragments_Handler._instance = this;\n\n\t\tthis.maybe_invalidate_minicart_cache();\n\t}\n\n\t/**\n\t * Returns the instance of this class.\n\t *\n\t * @returns Edit_Product\n\t */\n\tpublic static instance(): Cart_Fragments_Handler {\n\t\t// If the class has not been instantiated, throw an exception. The handler must be\n\t\t// initialised first, as it needs a couple of settings to get ready.\n\t\tif(!Cart_Fragments_Handler._instance) {\n\t\t\tthrow new Error('Class \"Cart_Fragments_Handler\" has not been instantiated. Please call `Cart_Fragments_Handler.init(<settings>)` before calling `Cart_Fragments_Handler.instance()`.');\n\t\t}\n\t\treturn Cart_Fragments_Handler._instance;\n\t}\n\n\t/**\n\t * Initialises the class and its event handlers.\n\t *\n\t * @param settings ICart_Fragments_Handler_Settings\n\t * @return Cart_Fragments_Handler\n\t */\n\tpublic static init(settings: ICart_Fragments_Handler_Settings): Cart_Fragments_Handler {\n\t\t// Initialise the Edit_Product handler. We can't call Edit_Product.instance here,\n\t\t// as the handler must be initialised with the settings first\n\t\treturn new Cart_Fragments_Handler(settings);\n\t}\n\n\t/**\n\t * Removes an item from the browsers' session storage.\n\t *\n\t * @param item_key\n\t */\n\tpublic remove_session_storage_item(item_key: string): void {\n\t\ttry {\n\t\t\t// Invalidate cache of WooCommerce minicart when the currency is selected via\n\t\t\t// the URL. This will ensure that the minicart is updated correctly\n\t\t\tconst supports_html5_storage = ((window['sessionStorage'] ?? null) !== null);\n\t\t\tif(supports_html5_storage) {\n\t\t\t\t// The fragment name might be generated dynamically by WooCommerce, so\n\t\t\t\t// we have to retrieve it from the WC parameters\n\t\t\t\t// @since WC 3.1\n\t\t\t\tsessionStorage.removeItem(item_key);\n\t\t\t}\n\t\t}\n\t\tcatch(error) {\n\t\t\tconst error_msg = 'Aelia - Exception occurred while accessing window.sessionStorage. ' +\n\t\t\t\t\t\t\t\t\t\t\t\t'This could be caused by the browser disabling cookies. ' +\n\t\t\t\t\t\t\t\t\t\t\t\t'COOKIES MUST BE ENABLED for the site to work correctly. ' +\n\t\t\t\t\t\t\t\t\t\t\t\t'Exception details below.';\n\t\t\tconsole.error(error_msg);\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\t/**\n\t * Purges the cart fragments from the browser's storage session.\n\t */\n\tpublic purge_cart_fragments(): void {\n\t\tconst cart_fragments_name: string = (this.settings.cart_fragments_params['fragment_name'] ?? '').trim();\n\t\tif(cart_fragments_name) {\n\t\t\tthis.remove_session_storage_item(cart_fragments_name);\n\t\t}\n\t}\n\n\t/**\n\t * Invalidates the minicart cache when the currency has been selected via the URL.\n\t */\n\tprotected maybe_invalidate_minicart_cache(): void {\n\t\tconst current_url: URL = new URL(window.location.href);\n\t\tconst is_currency_set_by_url: boolean = ((current_url.searchParams.get(Cart_Fragments_Handler.ARG_CURRENCY) ?? '').length > 0);\n\n\t\t// If the currency is set via the URL, and there are cart fragments stored in the session,\n\t\t// remove them so that they can be fetched using the active currency\n\t\tif(is_currency_set_by_url) {\n\t\t\tthis.purge_cart_fragments();\n\t\t}\n\t}\n}","import { IWC_Cart_Fragments_Params } from \"./classes/cart-fragments/interface.cart-fragments-handler-settings\";\nimport { Frontend_Scripts_Manager } from \"./classes/scripts-manager/class.frontend-scripts-manager\";\nimport { IAelia_CS_Frontend_Params } from \"./classes/scripts-manager/interface.aelia-currency-switcher-params\";\n\n// Add a reference to the global parameters\ndeclare global {\n\tvar wc_aelia_currency_switcher_params: IAelia_CS_Frontend_Params;\n\tvar wc_cart_fragments_params: IWC_Cart_Fragments_Params;\n}\n\n(function ready(callback, args) {\n  if(document.readyState != 'loading'){\n\t\t// If this function is called after the document has finished loading,\n\t\t// invoke the callback immediately\n\t\tcallback(args);\n\t}\n\telse {\n\t\t// If the document is still loading, trigger the callback on the\n\t\t// \"DOM loaded\" event\n\t\tdocument.addEventListener('DOMContentLoaded', () => callback(args));\n  }\n})(Frontend_Scripts_Manager.init, wc_aelia_currency_switcher_params);\n","import { IWidget_Settings } from \"../interface.widget-settings\";\n\n/**\n * A base class for the widgets provided by the Aelia Currency Switcher.\n *\n * @since 4.12.1.210629\n */\nexport abstract class Widget { // NOSONAR\n\t/**\n\t\t* The settings passed to the class.\n\t\t*\n\t\t* @var IWidget_Settings\n\t\t*/\n\tprotected settings: IWidget_Settings;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param settings IWidget_Settings\n\t */\n\tpublic constructor(settings: IWidget_Settings) {\n\t\tthis.settings = settings;\n\n\t\t// Initialise the event handlers used by the widget\n\t\tthis.init_event_handlers();\n\t}\n\n\t/**\n\t * Initialise the event handlers used by the widget.\n\t */\n\tprotected init_event_handlers(): void {\n\t\t// Purge the cart fragments when the country or the currency selection form is submitted\n\t\t// @since 4.12.4.210805\n\t\tjQuery(document).on('submit', '.currency_switch_form, .country_switch_form', (event: Event): void => {\n\t\t\tthis.purge_cart_fragments();\n\t\t});\n\n\t\t// Purge the cart fragments when the country or the currency change event is fired\n\t\t// @since 4.12.4.210805\n\t\tjQuery(document).on('aelia_currency_selected aelia_country_selected', (event: Event): void => {\n\t\t\tthis.purge_cart_fragments();\n\t\t});\n\t}\n\n\t/**\n\t * Purges the cart fragments. Convenience method.\n\t */\n\tprotected purge_cart_fragments(): void {\n\t\tthis.settings.cart_fragments_handler.purge_cart_fragments();\n\t}\n}","import { Widget } from \"./class.widget\";\n\n/**\n * Implements the features for the advanced dropdown currency selector widget, which\n * is rendered with HTML elements instead of a basic <select> field.\n *\n * @since 4.12.2.210706\n */\nexport abstract class Advanced_Dropdown_Widget extends Widget { // NOSONAR\n\t/**\n\t * The argument passed with POST requests to select a currency.\n\t */\n\tprotected ARG_CURRENCY = 'aelia_cs_currency';\n\n\t/**\n\t * Initialise the event handlers used by the widget.\n\t */\n\tprotected init_event_handlers(): void {\n\t\t// @since 4.12.4.210805\n\t\tsuper.init_event_handlers();\n\n\t\t// Close all dropdowns when the user clicks anywhere on the document other than a country selector\n\t\tjQuery(document).on('click', (event: Event): void => { // NOSONAR\n\t\t\t// If the target is not the country selector, close all the dropdowns\n\t\t\tif(jQuery(event.target).closest('.dropdown_selector .dropdown, .dropdown_selector .selected_option, .dropdown_selector .search').length <= 0) {\n\t\t\t\tthis.close_all_dropdowns();\n\t\t\t}\n\t\t});\n\n\t\t// Close all dropdowns when the user clicks anywhere on the document other than a country selector\n\t\tjQuery(document).on('keyup', '.widget_wc_aelia_currencyswitcher_widget .search', (event: JQuery.TriggeredEvent): void => { // NOSONAR\n\t\t\tswitch(event.which ?? '') {\n\t\t\t\t// When the user presses Return on the search field, submit the form using the first selected country\n\t\t\t\tcase 13:\n\t\t\t\t\tconst $selected_option: JQuery = jQuery(event.currentTarget).parents('.dropdown').first().find('.option.selected');\n\t\t\t\t\tif($selected_option) {\n\t\t\t\t\t\tthis.submit_selection($selected_option.data('value'));\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t// In all other cases, filter the list of elements in the dropdown\n\t\t\t\tdefault:\n\t\t\t\t\tconst $dropdown = jQuery(event.currentTarget).parents('.dropdown').first();\n\t\t\t\t\tconst search_value = jQuery(event.currentTarget).val().toString();\n\n\t\t\t\t\tthis.filter_options_by_search_value($dropdown, search_value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns all the dropdowns handled by a specific widget. Descendant classes must\n\t * implement this method to return a jQuery object that matches all the dropdowns\n\t * they handle (e.g. all the currency selectors, all the country selectors, etc)\n\t *\n\t * @return JQuery\n\t * @since 4.12.2.210706\n\t */\n\tprotected abstract get_all_dropdowns(): JQuery;\n\n\t/**\n\t * Opens or closes a dropdown when a currency selector is clicked.\n\t *\n\t * @param event\n\t * @param $widget\n\t */\n\tprotected toggle_dropdown(event: Event, $widget: JQuery): void {\n\t\tconst $dropdown: JQuery = $widget.find('.dropdown');\n\t\tif($dropdown.is(':visible')) {\n\t\t\t$widget.removeClass('active');\n\t\t\t$dropdown.slideUp(300);\n\t\t}\n\t\telse {\n\t\t\tthis.close_all_dropdowns();\n\t\t\tthis.set_dropdown_position($dropdown);\n\n\t\t\t// Open the dropdown with a sliding animation\n\t\t\t$dropdown.slideDown(300, (): void => {\n\t\t\t\t// Set the focus on the search field, if present\n\t\t\t\t$dropdown.find('.search').trigger('focus');\n\t\t\t});\n\n\t\t\t// Tag the dropdown as \"active\"\n\t\t\t$widget.addClass('active');\n\t\t}\n\t}\n\n\t/**\n\t * Closes all the currency selector dropdowns open on the page.\n\t *\n\t * @since 4.12.1.210629\n\t */\n\tprotected close_all_dropdowns(): void {\n\t\tconst $dropdowns = this.get_all_dropdowns();\n\t\t// Close the dropdowns\n\t\t$dropdowns.slideUp(300).removeClass('active');\n\n\t\t// Reset any filter that was applied to the dropdowns\n\t\t$dropdowns.each((index, element) => {\n\t\t\t// @since 4.12.2.210706\n\t\t\tthis.reset_filtered_options(jQuery(element));\n\t\t});\n\t}\n\n\t/**\n\t * Positions the dropdwon with the currency list relative to the currency field.\n\t *\n\t * @param JQuery $dropdown\n\t * @since 4.12.1.210629\n\t */\n\tprotected set_dropdown_position($dropdown: JQuery): void {\n\t\t$dropdown.css('top', 'calc(100%)');\n\t\t$dropdown.css('bottom', '');\n\t\t$dropdown.css('display', 'block');\n\n\t\tconst dropdown_data = $dropdown[0].getBoundingClientRect();\n\t\t$dropdown.css('display', 'none');\n\t\tif(window.innerHeight < dropdown_data.y + dropdown_data.height) {\n\t\t\t$dropdown.css('top', 'auto');\n\t\t\t$dropdown.css('bottom', 'calc(100%)');\n\t\t}\n\t}\n\n\t/**\n\t * Intercepts the selection and performs a POST request to update the page.\n\t *\n\t * @param {string} selected_value\n\t * @returns void\n\t */\n\tprotected abstract submit_selection(selected_value: string): void;\n\n\t/**\n\t * Removes all the filters set against the options in the dropdown, showing all of them.\n\t *\n\t * @param $dropdown\n\t * @since 4.12.2.210706\n\t */\n\tprotected reset_filtered_options($dropdown: JQuery): void {\n\t\t$dropdown.find('.search').val('');\n\t\t$dropdown.find('.option').removeClass('filter_hidden').removeClass('selected');\n\t}\n\n\t/**\n\t * Filters the list of options in a dropdown, keeping only the ones whose search data\n\t * matches the search value. The search is case-insensitive.\n\t *\n\t * @param $dropdown\n\t * @param search_value\n\t */\n\tprotected filter_options_by_search_value($dropdown: JQuery, search_value: string): void {\n\t\t// Set the search value to lower-case, for a case-insensitive search\n\t\tconst _search_value = search_value.trim().toLowerCase();\n\t\tif(_search_value) {\n\t\t\t// Clear any selected option\n\t\t\t$dropdown.find('.option').removeClass('selected');\n\n\t\t\t// Filter the options, keeping only the ones that match the search value\n\t\t\t$dropdown.find('.option').each((index, element) => {\n\t\t\t\tconst $current_element = jQuery(element);\n\t\t\t\tconst $search_data: string[] = $current_element.data('search_data');\n\n\t\t\t\tconsole.log($search_data);\n\t\t\t\tlet search_match = false;\n\t\t\t\tfor(let idx in $search_data) {\n\t\t\t\t\t// If the search value matches the search data of the current element, stop here\n\t\t\t\t\tif($search_data[idx].toString().toLowerCase().includes(_search_value)) {\n\t\t\t\t\t\tsearch_match = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$current_element.toggleClass('filter_hidden', !search_match);\n\t\t\t});\n\t\t\t$dropdown.find('.option:visible').first().addClass('selected');\n\t\t}\n\t\telse {\n\t\t\t// If the search field is empty, show all options\n\t\t\tthis.reset_filtered_options($dropdown);\n\t\t}\n\t}\n}","import { Advanced_Dropdown_Widget } from \"./base/class.advanced-dropdown-widget\";\n\n/**\n * Implements the features for the advanced dropdown currency selector widget, which\n * is rendered with HTML elements instead of a basic <select> field.\n *\n * @since 4.12.1.210629\n */\nexport class Dropdown_Currency_Selector_Widget extends Advanced_Dropdown_Widget { // NOSONAR\n\t/**\n\t * The argument passed with POST requests to select a currency.\n\t */\n\tprotected ARG_CURRENCY = 'aelia_cs_currency';\n\n\t/**\n\t * Returns a jQuery element matching all the selector widgets handled by this class.\n\t *\n\t * @returns JQuery\n\t */\n\tprotected get_all_dropdowns(): JQuery {\n\t\treturn jQuery('.wc_aelia_cs_currency_selector.active').find('.dropdown');\n\t}\n\n\t/**\n\t * Initialise the event handlers used by the widget.\n\t */\n\tprotected init_event_handlers(): void {\n\t\tsuper.init_event_handlers();\n\n\t\t// Advanced dropdown selector widget (custom HTML, flags)\n\t\t// Activate the currency selector dropdown when the selector is clicked\n\t\tjQuery(document).on('click', '.wc_aelia_cs_currency_selector .selected_currency', (event: Event): void => { // NOSONAR\n\t\t\tthis.toggle_dropdown(event, jQuery(event.currentTarget).parents('.wc_aelia_cs_currency_selector').first());\n\t\t});\n\n\t\t// Intercepts the currency selection and reloads the page with the new currency\n\t\tjQuery(document).on('click', '.wc_aelia_cs_currency_selector .currency', (event: Event): void => { // NOSONAR\n\t\t\tthis.submit_selection(jQuery(event.currentTarget).data('value'));\n\t\t});\n\n\t\t// Basic dropdown selector widget\n\t\t// Monitor the \"on change\" at the document level, to intercept the currency selection\n\t\t// in widgets created on the fly (e.g. by page builders)\n\t\t// @since 4.7.11.190924\n\t\tjQuery(document).on('change', '.widget_wc_aelia_currencyswitcher_widget .aelia_cs_currencies', (event: Event): void => { // NOSONAR\n\t\t\tevent.stopPropagation();\n\t\t\tthis.submit_selection(jQuery(event.currentTarget).val().toString());\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts the currency selection and performs a POST request to update the page.\n\t *\n\t * @param selected_value\n\t * @returns void\n\t */\n\tprotected submit_selection(selected_value: string): void {\n\t\tif(!selected_value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger an event to indicate that a currency has been selected. This will purge the\n\t\t// cart fragments before submitting the selection, and ensure that the cart fragments\n\t\t// are fetched \"fresh\", using the new currency\n\t\tjQuery(document).trigger('aelia_currency_selected');\n\n\t\t// Create an <input> element to contain the currency\n\t\tconst currency_field: HTMLInputElement = document.createElement('input');\n\t\tcurrency_field.type = 'hidden';\n\t\tcurrency_field.name = this.ARG_CURRENCY;\n\t\tcurrency_field.value = selected_value;\n\n\t\t// Create a hidden <form> element that will be used to send the POST request\n\t\tconst form: HTMLFormElement = document.createElement('form');\n\t\tform.classList.add('currency_switch_form');\n\t\tform.method = 'post';\n\t\tform.style.display = 'none !important';\n\t\tform.appendChild(currency_field);\n\t\tdocument.body.appendChild(form);\n\n\t\t// Submit the form\n\t\tform.submit();\n\t}\n}","import { Advanced_Dropdown_Widget } from \"./base/class.advanced-dropdown-widget\";\n\n/**\n * Implements the features for the basic dropdown country selector widget.\n *\n * @since 4.12.1.210629\n */\nexport class Dropdown_Country_Selector_Widget extends Advanced_Dropdown_Widget { // NOSONAR\n\t/**\n\t * The argument passed with POST requests to select a country.\n\t */\n\tprotected ARG_CUSTOMER_COUNTRY: string = 'aelia_customer_country';\n\n\t/**\n\t * Returns a jQuery element matching all the selector widgets handled by this class.\n\t *\n\t * @returns JQuery\n\t */\n\tprotected get_all_dropdowns(): JQuery {\n\t\treturn jQuery('.wc_aelia_cs_country_selector.active').find('.dropdown');\n\t}\n\n\t/**\n\t * Initialise the event handlers used by the widget.\n\t */\n\tprotected init_event_handlers(): void {\n\t\tsuper.init_event_handlers();\n\n\t\t// @since 4.12.2.210706\n\t\t// Advanced dropdown selector widget (custom HTML, flags)\n\t\t// Activate the country selector dropdown when the selector is clicked\n\t\tjQuery(document).on('click', '.wc_aelia_cs_country_selector .selected_country', (event: Event): void => { // NOSONAR\n\t\t\tthis.toggle_dropdown(event, jQuery(event.currentTarget).parents('.wc_aelia_cs_country_selector').first());\n\t\t});\n\n\t\t// Intercepts the country selection and reloads the page with the new country\n\t\tjQuery(document).on('click', '.wc_aelia_cs_country_selector .country', (event: Event): void => { // NOSONAR\n\t\t\tthis.submit_selection(jQuery(event.currentTarget).data('value'));\n\t\t});\n\n\t\t// Basic dropdown selector widget\n\t\t// Monitor the \"on change\" at the document level, to intercept the country selection\n\t\t// in widgets created on the fly (e.g. by page builders)\n\t\t// @since 4.7.11.190924\n\t\tjQuery(document).on('change', '.currency_switcher.widget_wc_aelia_country_selector_widget .countries', (event: Event): void => { // NOSONAR\n\t\t\tevent.stopPropagation();\n\t\t\tthis.submit_selection(jQuery(event.currentTarget).val().toString());\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts the country selection and performs a POST request to update the page.\n\t *\n\t * @param selected_value\n\t * @returns void\n\t */\n\tprotected submit_selection(selected_value: string): void {\n\t\tif(!selected_value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger an event to indicate that a country has been selected. This will purge the\n\t\t// cart fragments before submitting the selection, and ensure that the cart fragments\n\t\t// are fetched \"fresh\", using the new country\n\t\tjQuery(document).trigger('aelia_currency_selected');\n\n\t\t// Create an <input> element to contain the country\n\t\tconst country_field: HTMLInputElement = document.createElement('input');\n\t\tcountry_field.type = 'hidden';\n\t\tcountry_field.name = this.ARG_CUSTOMER_COUNTRY;\n\t\tcountry_field.value = selected_value;\n\n\t\t// Create a hidden <form> element that will be used to send the POST request\n\t\tconst form: HTMLFormElement = document.createElement('form');\n\t\tform.classList.add('country_switch_form');\n\t\tform.method = 'post';\n\t\tform.style.display = 'none !important';\n\t\tform.appendChild(country_field);\n\t\tdocument.body.appendChild(form);\n\n\t\t// Submit the form\n\t\tform.submit();\n\t}\n}","import { Cart_Fragments_Handler } from '../cart-fragments/class.cart-fragments-handler';\nimport { Widget } from '../widgets/base/class.widget';\nimport { IDictionary } from '../../../../../common/interface.dictionary';\nimport { IAelia_CS_Frontend_Params } from './interface.aelia-currency-switcher-params';\nimport { Dropdown_Currency_Selector_Widget } from '../widgets/class.dropdown-currency-selector-widget';\nimport { IWidget_Settings } from '../widgets/interface.widget-settings';\nimport { Dropdown_Country_Selector_Widget } from '../widgets/class.dropdown-country-selector-widget';\n\n/**\n * Implements the scripts to handle WooCommerce's cart fragments.\n *\n * @since 4.12.1.210629\n */\nexport class Frontend_Scripts_Manager { // NOSONAR\n\t/**\n\t * The singleton instance of this class.\n\t */\n\tprotected static _instance: Frontend_Scripts_Manager;\n\n\t /**\n\t\t* The settings passed to the class.\n\t\t*/\n\tprotected settings: IAelia_CS_Frontend_Params;\n\n\t/**\n\t * A list of the widgets loaded on the frontend.\n\t */\n\tprotected widgets: IDictionary<Widget> = {};\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param settings IAelia_CS_Frontend_Params\n\t */\n\tpublic constructor(settings: IAelia_CS_Frontend_Params) {\n\t\tthis.settings = settings;\n\n\t\t// If the cart fragments variable is missing, use a default object,\n\t\t// with empty values. This condition can occur if some optimisation\n\t\t// plugin strips the cart fragment scripts from the frontend.\n\t\t// The scripts should NOT be removed, but some tools do it anyway\n\t\t// @since 4.12.4.210805\n\t\tconst cart_fragments_params = window.wc_cart_fragments_params ?? {\n\t\t\tajax_url: '',\n\t\t\tcart_hash_key: '',\n\t\t\tfragment_name: '',\n\t\t\trequest_timeout: 0,\n\t\t}\n\n\t\t// Initialise the Cart Fragments Handler\n\t\tCart_Fragments_Handler.init({\n\t\t\t// Variable wc_cart_fragments_params is global, generated by WooCommerce\n\t\t\t// @see IWC_Cart_Fragments_Params\n\t\t\tcart_fragments_params: cart_fragments_params,\n\t\t});\n\n\t\tconst widgets_settings: IWidget_Settings = {\n\t\t\tcart_fragments_handler: Cart_Fragments_Handler.instance(),\n\t\t}\n\n\t\tthis.widgets['currency-selector'] = new Dropdown_Currency_Selector_Widget(widgets_settings);\n\t\tthis.widgets['country-selector'] = new Dropdown_Country_Selector_Widget(widgets_settings);\n\t}\n\n\t/**\n\t * Returns the instance of this class.\n\t *\n\t * @returns Edit_Product\n\t */\n\tpublic static instance(): Frontend_Scripts_Manager {\n\t\t// If the class has not been instantiated, throw an exception. The handler must be\n\t\t// initialised first, as it needs a couple of settings to get ready.\n\t\tif(!Frontend_Scripts_Manager._instance) {\n\t\t\tthrow new Error('Class \"Frontend_Scripts_Manager\" has not been instantiated. Please call `Frontend_Scripts_Manager.init(<settings>)` before calling `Frontend_Scripts_Manager.instance()`.');\n\t\t}\n\t\treturn Frontend_Scripts_Manager._instance;\n\t}\n\n\t/**\n\t * Initialises the class and its event handlers.\n\t *\n\t * @param settings IAelia_CS_Frontend_Params\n\t * @return Frontend_Scripts_Manager\n\t */\n\tpublic static init(settings: IAelia_CS_Frontend_Params): Frontend_Scripts_Manager {\n\t\t// Initialise the Edit_Product handler. We can't call Edit_Product.instance here,\n\t\t// as the handler must be initialised with the settings first\n\t\treturn new Frontend_Scripts_Manager(settings);\n\t}\n}"],"names":["callback","args","settings","this","Cart_Fragments_Handler","_instance","maybe_invalidate_minicart_cache","instance","Error","init","remove_session_storage_item","item_key","window","sessionStorage","removeItem","error","console","purge_cart_fragments","cart_fragments_name","cart_fragments_params","trim","URL","location","href","searchParams","get","ARG_CURRENCY","length","init_event_handlers","jQuery","document","on","event","cart_fragments_handler","target","closest","close_all_dropdowns","which","$selected_option","currentTarget","parents","first","find","submit_selection","data","$dropdown","search_value","val","toString","filter_options_by_search_value","toggle_dropdown","$widget","is","removeClass","slideUp","set_dropdown_position","slideDown","trigger","addClass","$dropdowns","get_all_dropdowns","each","index","element","reset_filtered_options","css","dropdown_data","getBoundingClientRect","innerHeight","y","height","_search_value","toLowerCase","$current_element","$search_data","log","search_match","idx","includes","toggleClass","Widget","stopPropagation","selected_value","currency_field","createElement","type","name","value","form","classList","add","method","style","display","appendChild","body","submit","Advanced_Dropdown_Widget","ARG_CUSTOMER_COUNTRY","country_field","widgets","wc_cart_fragments_params","ajax_url","cart_hash_key","fragment_name","request_timeout","widgets_settings","Dropdown_Currency_Selector_Widget","Dropdown_Country_Selector_Widget","Frontend_Scripts_Manager","wc_aelia_currency_switcher_params","readyState","addEventListener"],"sourceRoot":""}